plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '7.0.1'
}

group = 'coffee.ssafy'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // https://github.com/springdoc/springdoc-openapi
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // https://github.com/zalando/problem-spring-web
    implementation 'org.zalando:problem-spring-web-starter:0.29.1'

    // https://github.com/jwtk/jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // https://github.com/mapstruct/mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
}

tasks.named('test') {
    useJUnitPlatform()
}

node {
    download = true
    version = '20.11.0'
    nodeProjectDir = file('../frontend')
}

tasks.register('npmBuild', NpmTask) {
    dependsOn 'npmInstall'
    args = ['run', 'build']
}

tasks.named('compileJava') {
    dependsOn 'npmBuild'
}

tasks.register('copyNpmBuild', Copy) {
    from file('../frontend/dist')
    into file('build/resources/main/static')
}

//tasks.named('processResources') {
//    dependsOn 'copyNpmBuild'
//}
